// Prisma schema for Tourosphere (PostgreSQL)
// Switch provider if needed, defaulting to PostgreSQL per spec

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(cuid())
  name     String
  email    String   @unique
  password String
  avatar   String?
  bio      String?
  points   Int      @default(0)
  badges   BadgeOnUser[]
  posts    Post[]
  reviews  Review[]
  itineraries Itinerary[]
  expenses Expense[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id            String    @id @default(cuid())
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  region        String
  title         String
  story         String
  costs         Json?
  facilities    Json?
  images        String[]
  accuracyScore Float     @default(0)
  reviews       Review[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Review {
  id           String   @id @default(cuid())
  post         Post     @relation(fields: [postId], references: [id])
  postId       String
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  rating       Int
  comment      String
  helpfulVotes Int      @default(0)
  createdAt    DateTime @default(now())
}

model Itinerary {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  region    String
  days      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expense {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tripName  String
  region    String
  details   Json
  total     Float
  createdAt DateTime @default(now())
}

model Badge {
  id          String        @id @default(cuid())
  title       String
  description String
  icon        String
  users       BadgeOnUser[]
}

model BadgeOnUser {
  user   User  @relation(fields: [userId], references: [id])
  userId String
  badge  Badge @relation(fields: [badgeId], references: [id])
  badgeId String
  awardedAt DateTime @default(now())

  @@id([userId, badgeId])
}